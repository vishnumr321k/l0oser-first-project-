<%- include('../partials/admin/header') %>
<style>
    /* Main Content Styles */
.content-main {
    padding: 2rem;
    background-color: #f5f7fb;
    min-height: 100vh;
}

/* Header Section */
.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding: 0.5rem 0;
}

.content-title {
    color: #2c3345;
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.content-header p {
    color: #6c757d;
    margin-bottom: 0;
}



.content-header .form-control {
    width: 250px;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0,0,0,0.02);
}

/* Table Container */
.table-responsive {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.03);
    margin-top: 1rem;
}

/* Table Styles */
.table {
    margin-bottom: 0;
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
}

/* Table Header */
.table thead th {
    background-color: #f8f9fa;
    color: #2c3345;
    font-weight: 600;
    padding: 0.75rem;
    font-size: 0.875rem;
    border-bottom: 2px solid #e0e0e0;
    vertical-align: middle;
    white-space: nowrap;
}

/* Table Body */
.table tbody td {
    padding: 0.75rem;
    vertical-align: middle;
    border-bottom: 1px solid #e0e0e0;
    font-size: 0.875rem;
}

/* Table Row Hover */
.table tbody tr:hover {
    background-color: #f8f9fa;
}

/* Checkbox Column */
.form-check {
    margin: 0;
    display: flex;
    justify-content: center;
}

.form-check-input {
    margin: 0;
    cursor: pointer;
}

/* Button Styles */
.btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    line-height: 1.5;
    border-radius: 3px;
}

.btn-info {
    background-color: #2196F3;
    border: none;
}

.btn-success {
    background-color: #4CAF50;
    border: none;
}

.btn-danger {
    background-color: #f44336;
    border: none;
}

/* Badge Styles */
.badge {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
    display: inline-block;
    text-align: center;
    min-width: 60px;
}

.alert-success {
    background-color: #e8f5e9;
    color: #2e7d32;
}

.alert-danger {
    background-color: #ffebee;
    color: #c62828;
}

/* Link Styles */
.btn a {
    color: white;
    text-decoration: none;
    display: block;
    width: 100%;
    height: 100%;
}

/* Responsive Adjustments */
@media (max-width: 992px) {
    .table {
        min-width: 800px;
    }
    
    .btn-sm {
        padding: 0.2rem 0.4rem;
        font-size: 0.75rem;
    }
}

/* Fixed width columns for better alignment */
.table th:nth-child(1),
.table td:nth-child(1) {
    width: 5%;
}

.table th:nth-child(2),
.table td:nth-child(2) {
    width: 15%;
}

.table th:nth-child(3),
.table td:nth-child(3) {
    width: 25%;
}

.table th:nth-child(4),
.table td:nth-child(4) {
    width: 10%;
}

.table th:nth-child(5),
.table td:nth-child(5) {
    width: 15%;
}

.table th:nth-child(6),
.table td:nth-child(6) {
    width: 10%;
}

.table th:nth-child(7),
.table td:nth-child(7) {
    width: 10%;
}

.table th:nth-child(8),
.table td:nth-child(8) {
    width: 10%;
}

/* Card Styles */
.card {
    background: #fff;
    border-radius: 12px;
    border: none;
    box-shadow: 0 2px 15px rgba(0,0,0,0.04);
    margin-bottom: 2rem;
}

.card-body {
    padding: 2rem;
}

/* Form Section */
.form-label {
    color: #2c3345;
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.form-control {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 0.75rem;
    transition: all 0.3s ease;
}

.form-control:focus {
    border-color: #4CAF50;
    box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.15);
}

textarea.form-control {
    min-height: 120px;
}

.btn-primary {
    background-color: #4CAF50;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    background-color: #43a047;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

/* Table Styles */
.table-responsive {
    border-radius: 8px;
    overflow: hidden;
}

.table {
    margin-bottom: 0;
}

.table thead th {
    background-color: #f8f9fa;
    color: #2c3345;
    font-weight: 600;
    padding: 1rem;
    border-bottom: 2px solid #e0e0e0;
}

.table tbody td {
    padding: 1rem;
    vertical-align: middle;
    border-bottom: 1px solid #e0e0e0;
}

.table tbody tr:hover {
    background-color: #f8f9fa;
}

/* Status Badges */
.badge {
    padding: 0.5rem 1rem;
    font-weight: 500;
    border-radius: 30px;
}

.alert-success {
    background-color: #e8f5e9;
    color: #2e7d32;
}

.alert-danger {
    background-color: #ffebee;
    color: #c62828;
}

/* Action Buttons */
.btn {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.btn-info {
    background-color: #2196F3;
    border: none;
}

.btn-success {
    background-color: #4CAF50;
    border: none;
}

.btn-danger {
    background-color: #f44336;
    border: none;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

/* Pagination Styles */
.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    margin-top: 2rem;
}

.pagination-container a {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    background-color: #fff;
    color: #2c3345;
    text-decoration: none;
    transition: all 0.3s ease;
    border: 1px solid #e0e0e0;
}

.pagination-container a:hover {
    background-color: #f5f5f5;
}

.current-page {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    background-color: #4CAF50;
    color: #fff;
    font-weight: 500;
}

/* Error Messages */
.error-message {
    color: #f44336;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
}

/* Sweet Alert Customization */
.swal2-popup {
    border-radius: 12px;
    padding: 2rem;
}

.swal2-title {
    color: #2c3345;
    font-size: 1.5rem;
}

.swal2-content {
    color: #6c757d;
}

/* ... (previous styles remain the same until button styles) ... */

/* Compact Button Styles */
.btn {
    padding: 0.4rem 0.8rem;
    font-size: 0.875rem;
    border-radius: 4px;
    font-weight: 500;
    transition: all 0.2s ease;
    min-width: auto;
    height: 32px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
}

/* Primary Button - Create Category */
.btn-primary {
    background-color: #4CAF50;
    border: none;
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
}

.btn-primary:hover {
    background-color: #43a047;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Info Button - Edit & Add Offer */
.btn-info {
    background-color: #2196F3;
    border: none;
    min-width: 60px;
    padding: 0.35rem 0.7rem;
}

.btn-info:hover {
    background-color: #1e88e5;
    box-shadow: 0 2px 4px rgba(33,150,243,0.2);
}

/* Success Button - List */
.btn-success {
    background-color: #4CAF50;
    border: none;
    min-width: 50px;
    padding: 0.35rem 0.7rem;
}

.btn-success:hover {
    background-color: #43a047;
    box-shadow: 0 2px 4px rgba(76,175,80,0.2);
}

/* Danger Button - Unlist */
.btn-danger {
    background-color: #f44336;
    border: none;
    min-width: 50px;
    padding: 0.35rem 0.7rem;
}

.btn-danger:hover {
    background-color: #e53935;
    box-shadow: 0 2px 4px rgba(244,67,54,0.2);
}

/* Button Links */
.btn a {
    color: white;
    text-decoration: none;
    font-size: 0.875rem;
    white-space: nowrap;
}

/* Status Badges - Made Smaller */
.badge {
    padding: 0.3rem 0.6rem;
    font-size: 0.75rem;
    font-weight: 500;
    border-radius: 20px;
}

/* Table Cell Adjustments for Smaller Buttons */
.table tbody td {
    padding: 0.75rem;
    vertical-align: middle;
}

/* Button Groups in Table */
.table .btn-group {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

/* Offer Button Specific Style */
button[style*="width: 100px"] {
    width: auto !important;
    min-width: 80px;
}

/* List/Unlist Button Specific Style */
button[style*="width: 70px"] {
    width: auto !important;
    min-width: 60px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .btn {
        padding: 0.35rem 0.6rem;
        font-size: 0.813rem;
    }
    
    .table td .btn {
        margin: 2px 0;
        display: inline-flex;
        width: auto;
    }
}

/* Additional Helper Classes */
.btn-xs {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    line-height: 1.5;
}

/* Optional: Condensed Table Style */
.table-condensed tbody td {
    padding: 0.5rem 0.75rem;
}

/* Sweet Alert Button Adjustments */
.swal2-actions .swal2-confirm,
.swal2-actions .swal2-cancel {
    padding: 0.4rem 1rem;
    font-size: 0.875rem;
    border-radius: 4px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .content-header {
        flex-direction: column;
        gap: 1rem;
    }
    
    .content-header .form-control {
        width: 100%;
    }
    
    .card-body {
        padding: 1rem;
    }
    
    .table thead {
        display: none;
    }
    
    .table tbody td {
        display: block;
        text-align: right;
        padding: 0.5rem;
    }
    
    .table tbody td::before {
        content: attr(data-label);
        float: left;
        font-weight: 600;
        color: #2c3345;
    }
}


</style>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Categories </h2>
            <p>Add, edit or delete a category</p>
        </div>
        <div>
            <input type="text" placeholder="Search Categories" class="form-control bg-white">
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                        <div class="mb-4">
                            <label for="name" class="form-label">Name</label>
                            <input type="text" placeholder="Type here" class="form-control" id="name" name="name" />
                        </div>
                        <div class="mb-4">
                            <label for="description" class="form-label">Description</label>
                            <textarea placeholder="Type here" class="form-control" id="description" name="description"></textarea>
                        </div>
                        <div class="d-grid">
                            <button class="btn btn-primary" type="submit">Create Category</button>
                        </div>
                    </form>                    
                </div>
                <div class="col-md-9">
                    <div class="table-responsive">
                 <!-- Table Section -->
<div class="table-responsive">
    <table class="table table-hover">
        <thead>
            <tr>
                <th class="text-center" style="width: 5%">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" />
                    </div>
                </th>
                <th style="width: 15%">Name</th>
                <th style="width: 25%">Description</th>
                <th style="width: 10%">Offer Price</th>
                <th style="width: 15%">Offer</th>
                <th style="width: 10%">Status</th>
                <th style="width: 10%">List/Unlist</th>
                <th style="width: 10%">Action</th>
            </tr>
        </thead>
        <tbody>
            <% cat.reverse().forEach((category, index) => { %>
                <tr>
                    <td class="text-center">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="<%= category._id %>" />
                        </div>
                    </td>
                    <td><%= category.name %></td>
                    <td><%= category.description %></td>
                    <td>
                        <%if(category.categoryOffer){%>
                            <%=category.categoryOffer%>%
                        <%}else{%>
                            0%
                        <%}%>
                    </td>
                    <td>
                        <%if(category.categoryOffer === 0){%>
                            <button class="btn btn-info btn-sm">
                                <a href="#" class="text-white" onclick="addOffer('<%=category._id%>')">Add Offer</a>
                            </button>
                        <% } else { %>
                            <button class="btn btn-info btn-sm">
                                <a href="#" class="text-white" onclick="removeOffer('<%=category._id%>')">Remove Offer</a>
                            </button>
                        <% } %>
                    </td>
                    <td>
                        <% if (category.isListed) { %>
                            <span class="badge alert-success">Listed</span>
                        <% } else { %>
                            <span class="badge alert-danger">Unlisted</span>
                        <% } %>
                    </td>
                    <td>
                        <% if (category.isListed) { %>
                            <button class="btn btn-danger btn-sm">
                                <a href="/admin/listCategory?id=<%=category._id%>" class="text-white">Unlist</a>
                            </button>
                        <% } else { %>
                            <button class="btn btn-success btn-sm">
                                <a href="/admin/unlistCategory?id=<%=category._id%>" class="text-white">List</a>
                            </button>
                        <% } %>
                    </td>
                    <td>
                        <button class="btn btn-info btn-sm">
                            <a href="/admin/editCategory?id=<%=category._id%>" class="text-white">Edit</a>
                        </button>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>

                    </div>
                </div> <!-- .col// -->
            </div> <!-- .row // -->
        </div> <!-- card body .// -->
    </div>
    <div class="pagination-container">
        <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>">&laquo; Previous</a>
        <% } %> <% for (let i = 1; i <= totalPages; i++) { %> <% if (i ===
        currentPage) { %>
        <span class="current-page"><%= i %></span>
        <% } else { %>
        <a href="?page=<%= i %>"><%= i %></a>
        <% } %> <% } %> <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>">Next &raquo;</a>
        <% } %>
      </div>
   <!-- card .// -->
</section> <!-- content-main end// -->



<script>
    function handleFormSubmit(event){
        event.preventDefault();
        if(!validateForm()){
            return 
        }
        const name = document.getElementsByName('name')[0].value.trim();
        const description = document.getElementById('description').value.trim();

        fetch('/admin/addCategory',{
            method : 'POST',
            headers:{
                'content-type' : 'application/json',
            },
            body:JSON.stringify({name, description})
        })
        .then((response) => {
            if (!response.ok) {
                return response.json().then((errorData) => {
                    throw new Error(errorData.error);
                });
            }
            return response.json();
        })
        .then((data) => {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message,
            }).then(() => {
                location.reload();
            });
        })
        .catch((error) => {
            if (error.message === 'Category already exists') {
                Swal.fire({
                    icon: 'warning',
                    title: 'Warning',
                    text: 'This category name is already in use. Please choose a different name.',
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An error occurred while adding the category.',
                });
            }
            console.error('Error adding category:', error);
        });
    }


    function validateForm(){

        clearErrorMessage();
        
        const name = document.getElementsByName('name')[0].value.trim();
        const description = document.getElementById('description').value.trim();
        isValid = true; 
        

        if(name === ''){
            displayErrorMessage('name-error','Please enter a name');
            isValid = false
        }else if(!/^[a-zA-Z\s]+$/.test(name)){
            displayErrorMessage('name-error', 'Category name contain only alphabetic charectors');
            isValid = false;

        }
        if(description === ''){
            displayErrorMessage('description-error','Please enter a description');
            isValid : false;
        }
        return isValid;
    }

    function displayErrorMessage(elementId, message){
        var errorElemet = document.getElementById(elementId);
        errorElemet.innerHTML = message;
        errorElemet.style.display = 'block';
    }

    function clearErrorMessage(){
        const errorElements = document.getElementsByClassName('error-message')
        Array.from(errorElements).forEach((element) => {
            element.innerText ='';
            element.style.display = 'none';
        });
    }



    async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
        title: 'Offer in Percentage',
        input: 'number',
        inputLabel: 'Percentage',
        inputPlaceholder: '%',
        inputAttributes: { min: 1, max: 100 },
        showCancelButton: true,
        confirmButtonText: 'Submit',
        cancelButtonText: 'Cancel',
        preConfirm: (value) => {
            if (value === '' || isNaN(value)) {
                return Swal.showValidationMessage('Please enter a valid number.');
            }
            if (value < 1 || value > 100) {
                return Swal.showValidationMessage('Please enter a percentage between 1 and 100.');
            }
            return value; 
        }
    });

    if (amount) {
    
        if (parseInt(amount) > 100) {
            Swal.fire({
                title: 'Warning!',
                text: 'The percentage cannot be more than 100. Please enter a valid value.',
                icon: 'warning',
                confirmButtonText: 'Okay'
            });
            return; 
        }

        
        try {
            const response = await fetch('/admin/addCategoryOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    percentage: parseInt(amount),
                    categoryId: categoryId
                })
            });

            const data = await response.json();

            if (response.ok && data.status) {
                Swal.fire(
                    'Offer Added',
                    'The offer has been added successfully!',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire('Failed', data.message || 'Failed to add offer', 'error');
            }
        } catch (error) {
            Swal.fire(
                'Error',
                'An error occurred while adding the offer',
                'error'
            );
            console.log('Error adding offer', error);
        }
    }
}

</script>
<%- include('../partials/admin/footer') %>