<!DOCTYPE html>
<html lang="en">
<head>
    <!-- ... existing head content ... -->
    <style>
        /* Add these styles to your existing CSS */
        * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  body {
    min-height: 100vh;
    background: #000;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .otp-container {
    max-width: 400px;
    width: 100%;
    background: white;
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    margin-left: 400px;
  }

  h3 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .form-group {
    margin-bottom: 1rem;
    text-align: left;
  }

  .form-group label {
    font-size: 0.9rem;
    color: #333;
  }

  .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-top: 0.5rem;
  }

  .btn {
    display: inline-block;
    width: 100%;
    padding: 0.75rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
  }

  .btn-primary {
    background: #000;
    color: #fff;
    margin-top: 1rem;
  }

  .btn-link {
    background: none;
    color: #007bff;
    text-decoration: none;
    font-size: 0.9rem;
  }

  .btn-link:hover {
    text-decoration: underline;
  }

  .otp-timer {
    margin: 1rem auto;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1rem;
    color: #000;
  }

  .text-muted {
    font-size: 0.9rem;
    color: #666;
    margin-top: 1rem;
  }

  .text-muted a {
    color: #000;
    text-decoration: none;
  }

  .text-muted a:hover {
    text-decoration: underline;
  }

  .alert-danger {
    margin-top: 1rem;
    padding: 0.75rem;
    color: #721c24;
    background: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 8px;
    font-size: 0.875rem;
  }
        .resend-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .otp-timer {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="otp-container">
        <h3>Email Verification</h3>
        <%if(locals.message && locals.message.length>0){%>
            <span style="color: red;"><%=message%></span>
        <%}%>
        <form action="/verify-otp-to-new" method="post">
            <div class="form-group">
                <label for="otp">Enter OTP:</label>
                <input type="text" id="otp" name="otp" class="form-control" required>
            </div>
            <button type="submit" class="btn btn-primary">Verify OTP</button>
        </form>
        <div class="otp-timer" id="otpTimer">01:30</div>
        <button type="button" class="btn btn-link resend-button">Resend OTP</button>
        <%if(locals.message && message.length > 0){%>
            <div class="alert alert-danger">
                <%=message%>
            </div>
        <%}%>
        <div class="text-muted">
            Already verified? <a href="/login">Login now</a>
        </div>
    </div>
    
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    // Frontend JavaScript - Add this before the closing body tag
    <script>
    let timeLeft = 30; // 1:30 in seconds
    let timerId = null;
    
    function startTimer() {
        // Clear any existing timer
        if (timerId) clearInterval(timerId);
        
        // Disable resend button initially
        document.querySelector('.resend-button').setAttribute('disabled', 'true');
        timeLeft = 90;
        
        timerId = setInterval(() => {
            timeLeft--;
            
            // Format time as MM:SS
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            const displayTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            document.getElementById('otpTimer').textContent = displayTime;
            
            if (timeLeft <= 0) {
                clearInterval(timerId);
                document.querySelector('.resend-button').removeAttribute('disabled');
            }
        }, 1000);
    }
    
    // Function to handle resend OTP
    async function resendOTP() {
        try {
            const response = await fetch('/new-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'New OTP has been sent to your email!'
                });
                startTimer(); // Restart the timer
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to resend OTP'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while resending OTP'
            });
        }
    }
    
    // Start timer when page loads
    document.addEventListener('DOMContentLoaded', () => {
        startTimer();
        
        // Add click handler for resend button
        document.querySelector('.resend-button').addEventListener('click', resendOTP);
    });
    </script>
</body>
</html>